0 info it worked if it ends with ok
1 verbose cli [ '/home/ubuntu/.nvm/versions/node/v4.2.1/bin/node',
1 verbose cli   '/home/ubuntu/.nvm/versions/node/v4.2.1/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@2.14.7
3 info using node@v4.2.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/home/ubuntu/workspace',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/ubuntu/.npm/flexi-validate/1.0.0/package.tgz not in flight; packing
9 verbose tar pack [ '/home/ubuntu/.npm/flexi-validate/1.0.0/package.tgz',
9 verbose tar pack   '/home/ubuntu/workspace' ]
10 verbose tarball /home/ubuntu/.npm/flexi-validate/1.0.0/package.tgz
11 verbose folder /home/ubuntu/workspace
12 info prepublish flexi-validate@1.0.0
13 verbose addLocalTarball adding from inside cache /home/ubuntu/.npm/flexi-validate/1.0.0/package.tgz
14 silly cache afterAdd flexi-validate@1.0.0
15 verbose afterAdd /home/ubuntu/.npm/flexi-validate/1.0.0/package/package.json not in flight; writing
16 verbose afterAdd /home/ubuntu/.npm/flexi-validate/1.0.0/package/package.json written
17 silly publish { name: 'flexi-validate',
17 silly publish   version: '1.0.0',
17 silly publish   description: 'Flexible JavaScript object validator',
17 silly publish   license: 'MIT',
17 silly publish   author: { name: 'Christian Natis', url: 'https://github.com/cnatis' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/cnatis/flexi-validate.git' },
17 silly publish   scripts:
17 silly publish    { test: 'jasmine-node ./spec',
17 silly publish      build: 'npm run clean-build-folder; npm run build-prod && npm run build-dev',
17 silly publish      'build-prod': 'npm run build-browser-min && npm run build-node-min',
17 silly publish      'build-dev': 'npm run build-browser && npm run build-node',
17 silly publish      'clean-build-folder': 'rm -rf ./build',
17 silly publish      'build-browser': 'webpack --target=web --output-library-target=var --output-filename=flexiValidate.browser.js',
17 silly publish      'build-node': 'webpack --target=node --output-library-target=umd --output-filename=flexiValidate.node.js',
17 silly publish      'build-browser-min': 'webpack -p --target=web --output-library-target=var --output-filename=flexiValidate.browser.min.js',
17 silly publish      'build-node-min': 'webpack -p --target=node --output-library-target=umd --output-filename=flexiValidate.node.min.js' },
17 silly publish   main: 'index.js',
17 silly publish   files: [ 'build', 'index.js', 'lib.js' ],
17 silly publish   keywords:
17 silly publish    [ 'validator',
17 silly publish      'validation',
17 silly publish      'flexible',
17 silly publish      'validate',
17 silly publish      'flexi-validate',
17 silly publish      'flexi' ],
17 silly publish   devDependencies:
17 silly publish    { 'babel-core': '^6.4.0',
17 silly publish      'babel-loader': '^6.2.1',
17 silly publish      'babel-preset-es2015': '^6.3.13',
17 silly publish      'jasmine-node': '^1.14.5',
17 silly publish      webpack: '^1.12.10' },
17 silly publish   readme: '# Flexi Validate\nA flexible JavaScript object validator\n\n## Module Formats\n* Global (Found in build/flexiValidate.browser.js)\n* ES6 (Found in lib.js)\n* UMD (AMD, CommonJS2) (Found in build/flexiValidate.node.js)\n\n## Supported Environments\n* Node\n* Browser\n\n## Supported Features\n* Async validators\n* Nested object validation\n* Complex object validation\n\n## Dependencies\n* No external dependencies, Promise MUST be globably available, either shim or run in a run time that has Promise support\n\n## Basic Usage\nFlexi Validate is meant to be a barebones tool to run validation assertions on JavaScript objects. Because it is meant to be as barebones as possible, Flexi Validate does not include any utilities for assertions. It will only run your assertions against the target object. Due to the fact that Flexi Validate is barebones, users can bend it to their will. You can use it for validating complex objects by using multiple validation objects and calling isValid inside the first isValid. This can be used to validate an object with an array of objects, the possibilities are nearly endless.\n\n### Validation Object\nExample validation object to be passed to Flexi Validate\n```\n    var validationObj = {\n\t\tvalidationInput: {\n\t\t\tvalidationProp: {\n\t\t\t\tisValid: function(item) { // Returns true if item is valid\n\t\t\t\t\treturn true;\t      // Parameter is the targetObj[validationInput]\n\t\t\t\t},\n\t\t\t\tmessage: function(item) { // Can be a function or string\n\t\t\t\t    return \'is required\'; // Parameter is the targetObj[validationInput]\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\tif(typeof(username) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username === null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username.trim().length <= 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t}\n\t};\n```\n\nEach property on the validation object corresponds to a property on the object to be validated, we call this object a "validation input." The properties on a validation input are called "validation props," they are objects containing an isValid function and a message which can be a string or function, used to determine validity.\n\n### Validating an Object\n```\n    var validationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\tif(typeof(username) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username === null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username.trim().length <= 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar objectToValidate = {\n\t    username: \'\'\n\t};\n\t\n\tflexiValidate.isValid(objectToValidate, validationObj); \n\t// returns false because the username on the object failed the validation test\n\t\n\tflexiValidate.allMessages(objectToValidate, validationObj);\n\t// returns the following data structure\n\t{\n\t    username: {\n        \trequired: \'Username is required\'\n        }\n\t}\n\t\n\tflexiValidate.messages(objectToValidate, validationObj, \'username\');\n\t// returns the following object\n\t[\n    \t{\n    \t    required: \'Username is required\'\n    \t}\n    ]\n```\n\n### Asynchronous Validation of an Object\n```\n    var validationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\t\t    setTimeout(function() {\n\t\t\t\t\t        if(typeof(username) === \'undefined\')\n        \t\t\t\t\t\tresolve(false);\n        \t\t\t\t\tif(username === null)\n        \t\t\t\t\t\tresolve(false);\n        \t\t\t\t\tif(username.trim().length <= 0)\n        \t\t\t\t\t    resolve(false);\n        \t\t\t\t\tresolve(true);\n\t\t\t\t\t    }, 1000);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar objectToValidate = {\n\t    username: \'testUsername\'\n\t};\n\t\n\tflexiValidate.isValidAsync(objectToValidate, validationObj)\n    \t.then(function(result) {\n            // returns true because the username on the object passed the validation test\t    \n    \t});\n\t\n\tflexiValidate.allMessagesAsync(objectToValidate, validationObj);\n\t    .then(function(allMessages) {\n\t        // returns the following data structure\n        \t{\n            \tusername: {\n            \t    required: \'Username is required\'\n            \t}\n        \t}\n\t    });\n\t\n\t\n\tflexiValidate.messagesAsync(objectToValidate, validationObj, \'username\')\n\t\t.then(function(message) {\n        \t// returns the following object\n        \t[\n\t        \t{\n\t        \t    required: \'Username is required\'\n\t        \t}\n\t        ]\n\t    });\n```\n\n## API Reference\n\n### isValid\n\nReturns true if all the validations for the target object return true\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\n```\n    Boolean isValid(targetObj, validationObj)\n```\n\n### isValidAsync\n\nReturns a promise resolving to true if all the validations for the target object return true\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\n```\n    Promise isValidAsync(targetObj, validationObj)\n```\n\n### messages\n\nReturns an object where each property is a failed validation and the value of that property is the validation message\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\nThird parameter is the key for the validation input we want to get messages for, should be a string\n```\n    Object messages(targetObj, validationObj, validationInput)\n```\n\n### messagesAsync\n\nReturns a promise resolving to an object where each property is a failed validation and the value of that property is the validation message\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\nThird parameter is the key for the validation input we want to get messages for, should be a string\n```\n    Promise messagesAsync(targetObj, validationObj, validationInput)\n```\n\n### allMessages\n\nReturns an array of objects where each object is a failed validation input and each property on the object is a failed validation prop and the value of that property is the validation message\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\n```\n    Array allMessages(targetObj, validationObj)\n```\n\n### allMessagesAsync\n\nReturns a promise resolving to an array of objects where each object is a failed validation input and each property on the object is a failed validation prop and the value of that property is the validation message\nFirst parameter is the target object we want to validate\nSecond parameter is the validation object containing our validation structure\n```\n    Promise allMessagesAsync(targetObj, validationObj)\n```\n\n### cleanAttributes\n\nFilters the properties on the provided object to only those that were validated\nReturns the filtered object\n\nNote this function does not check the validity of the object\n\n```\n    Object cleanAttributes(targetObj, validationObj)\n```\n\n#### Example #1\n\n```\n    var validationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar objectToValidate = {\n\t    username: \'test\',\n\t    somethingElse: true\n\t};\n\t\n\tflexiValidate.cleanAttributes(objectToValidate, validationObj); \n\t// returns the following object\n\t// somthingElse is filtered because we are not validating it\n\t{\n\t    username: \'test\'\n\t}\n```\n\n#### Example #2\n\n```\n    var validationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t},\n\t\tsomethingElse: {}\n\t};\n\t\n\tvar objectToValidate = {\n\t    username: \'test\',\n\t    somethingElse: true\n\t};\n\t\n\tflexiValidate.cleanAttributes(objectToValidate, validationObj); \n\t// returns the following object\n\t// somthingElse is not filtered because we are validating it even without\n\t// a validation prop on the validation input\n\t{\n\t    username: \'test\',\n\t    somethingElse: true\n\t}\n```\n\n## More Code Exmaples\n\n### Validate Nested Object\n\n```\n    var validationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\tif(typeof(username) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username === null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username.trim().length <= 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t},\n\t\t\'pet.name\': {\n\t\t\trequired: {\n\t\t\t\tisValid: function(name) {\n\t\t\t\t\tif(typeof(name) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Pet name is required\'\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar objectToValidate = {\n\t    username: \'test\',\n\t    pet: {\n\t    \ttype: \'cat\'\n\t    }\n\t};\n\t\n\tflexiValidate.isValid(objectToValidate, validationObj); \n\t// returns false because the pet name on the object failed the validation test\n\t\n\tflexiValidate.allMessages(objectToValidate, validationObj);\n\t// returns the following data structure\n\t{\n\t    \'pet.name\': {\n        \trequired: \'Pet name is required\'\n        }\n\t}\n\t\n\tflexiValidate.messages(objectToValidate, validationObj, \'pet.name\');\n\t// returns the following object\n\t[\n    \t{\n    \t    required: \'Pet name is required\'\n    \t}\n    ]\n```\n\n### Validate Complex Objects\n```\n    var userValidationObj = {\n\t\tusername: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(username) {\n\t\t\t\t\tif(typeof(username) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username === null)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif(username.trim().length <= 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Username is required\'\n\t\t\t}\n\t\t},\n\t\tpets: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(pets) {\n\t\t\t\t\treturn pets.reduce(function(result, current) {\n\t\t\t\t\t\tif(result) {\n\t\t\t\t\t\t\treturn flexiValidate.isValid(current, petValidationObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, true);\n\t\t\t\t},\n\t\t\t\tmessage: function(pets) {\n\t\t\t\t\treturn pets.map(function(current) {\n\t\t\t\t\t\treturn flexiValidate.allMessages(current, petValidationObj);\n\t\t\t\t\t}).filter(function(item) {\n\t\t\t\t\t\treturn (typeof(item) !== \'undefined\');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar petValidationObj = {\n\t\tname: {\n\t\t\trequired: {\n\t\t\t\tisValid: function(name) {\n\t\t\t\t\tif(typeof(name) === \'undefined\')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\t\t\t\tmessage: \'Pet name is required\'\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar objectToValidate = {\n\t    username: \'test\',\n\t    pets: [\n\t\t    {\n\t\t    \ttype: \'cat\'\n\t\t    }\n\t\t]\n\t};\n\t\n\tflexiValidate.isValid(objectToValidate, validationObj); \n\t// returns false because the pets array on the object failed the validation test\n\t\n\tflexiValidate.allMessages(objectToValidate, validationObj);\n\t// returns the following data structure\n\t{\n\t    pets: {\n        \trequired: [\n        \t\tname: {\n        \t\t\trequired: \'Pet name is required\'\n        \t\t}\n        \t]\n        }\n\t}\n\t\n\tflexiValidate.messages(objectToValidate, validationObj, \'pets\');\n\t// returns the following object\n\t[\n    \t[\n    \t\tname: {\n\t    \t    required:  \'Pet name is required\'\n\t\t    }\n    \t]\n    ]\n```',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '59eabf1704401306346240a04fb0639572b18866',
17 silly publish   bugs: { url: 'https://github.com/cnatis/flexi-validate/issues' },
17 silly publish   homepage: 'https://github.com/cnatis/flexi-validate#readme',
17 silly publish   _id: 'flexi-validate@1.0.0',
17 silly publish   _shasum: 'e2081b3a088f0d8ec13d3e7f817718ca5dbb11e0',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name flexi-validate
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/flexi-validate
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/ubuntu/.npm/flexi-validate/1.0.0/package.tgz
25 verbose request uri https://registry.npmjs.org/flexi-validate
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 3:15:46 PM
28 verbose request using bearer token for auth
29 verbose request id 1fcb60ff40eeb064
30 http request PUT https://registry.npmjs.org/flexi-validate
31 http 403 https://registry.npmjs.org/flexi-validate
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Tue, 12 Jan 2016 15:15:47 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-ord1726-ORD',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1452611746.559805,VS0,VE744' }
33 verbose request invalidating /home/ubuntu/.npm/registry.npmjs.org/flexi-validate on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : flexi-validate
35 verbose stack     at makeError (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/request/request.js:1063:14)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/home/ubuntu/.nvm/versions/node/v4.2.1/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid flexi-validate
38 verbose cwd /home/ubuntu/workspace
39 error Linux 4.2.0-c9
40 error argv "/home/ubuntu/.nvm/versions/node/v4.2.1/bin/node" "/home/ubuntu/.nvm/versions/node/v4.2.1/bin/npm" "publish"
41 error node v4.2.1
42 error npm  v2.14.7
43 error code E403
44 error "You cannot publish over the previously published version 1.0.0." : flexi-validate
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
